
#import pysnooper
#@pysnooper.snoop()

def same_parity(numbers):
    return list(filter(lambda x: x % 2 == numbers[0] % 2, numbers))

print(same_parity([-7, 0, 67, -9, 70, -29, 90]))

# def testing_lesson(filename: str):
#     '''–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞ –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'''
#     from zipfile import ZipFile
#
#     with ZipFile(filename) as z:
#         length = len(z.namelist()) // 2
#         files = [(code, out) for code, out in zip(z.namelist()[::2], z.namelist()[1::2])]
#         for file_exec, file_out in files:
#             with z.open(name=file_exec) as fi:
#                 with z.open(name=file_out) as fo:
#                     code, out = fi.read().decode(), fo.read().decode()
#                     print(f'–¢–µ—Å—Ç ‚Ññ {file_exec} –∏–∑ {length}')
#                     print(f'\n–ö–æ–¥: \n\n{code}\n')
#                     print('-' * 100)
#                     print('–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
#                     try:
#                         exec(code)
#                         print(f"{'-' * 100}\n–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{out}\n{'*' * 100}")
#                     except Exception as e:
#                         print(f'{"üö´" * 50}\n"–¢–µ—Å—Ç ‚Ññ {file_exec} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å `–æ—à–∏–±–∫–æ–π "{type(e).__name__}: {e}\n')
#                         print(f'–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \n{out}\n{"üö´" * 50}"\n')
#
#
# filename = 'tests_2310066.zip'
# testing_lesson(filename)
#
#
# # ==================================================
# # Testing regex
# # ==================================================
#
# def testing_lesson_regex(filename: str, regex):
#     '''–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ –∏–∑ —Ñ–∞–π–ª–∞, –∞ –ø–æ—Ç–æ–º —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∞'''
#     from zipfile import ZipFile
#     import re
#
#     flag = 'OK'
#     with ZipFile(filename) as z:
#         files = [(code, out) for code, out in zip(z.namelist()[::2], z.namelist()[1::2])]
#         for file_exec, file_out in files:
#             with z.open(name=file_exec) as fi:
#                 with z.open(name=file_out) as fo:
#                     string, result = fi.read().decode(), fo.read().decode()
#                     try:
#                         f = re.finditer(regex, string)
#                         my_result = ' '.join([item.group() for item in f])
#                         if my_result != result:
#                             flag = 'Failed'
#                         print(f'–¢–µ—Å—Ç ‚Ññ {file_exec}: {flag}')
#                         print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {my_result}')
#                         print(f'–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}')
#                         print()
#                     except Exception as e:
#                         print(f'{"üö´" * 50}\n"–¢–µ—Å—Ç ‚Ññ {file_exec} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å `–æ—à–∏–±–∫–æ–π "{type(e).__name__}: {e}\n')
#                         print(f'–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \n{result}\n{"üö´" * 50}"\n')
#
# regex = r''
# filename = 'tests_2310066.zip'
# testing_lesson_regex(filename, regex)